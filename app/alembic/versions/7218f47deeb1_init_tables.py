"""init_tables

Revision ID: 7218f47deeb1
Revises:
Create Date: 2025-10-05 06:01:25.317532

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7218f47deeb1"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "account_types",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sa.String(length=120), nullable=False),
        sa.Column("key", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("title"),
    )
    op.create_index(op.f("ix_account_types_id"), "account_types", ["id"], unique=False)
    op.create_index(op.f("ix_account_types_key"), "account_types", ["key"], unique=True)
    op.create_table(
        "accounts",
        sa.Column("deleted_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("search_text", sa.TEXT(), nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("password_reset_token", sa.VARCHAR(length=128), nullable=True),
        sa.Column("password_reset_token_created_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("email_confirmed", sa.Boolean(), nullable=False),
        sa.Column("confirmed_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("confirmation_token", sa.TEXT(), nullable=True),
        sa.Column("confirmation_token_sent_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("remember_token", sa.TEXT(), nullable=True),
        sa.Column("remember_token_created_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("sign_in_count", sa.Integer(), nullable=False),
        sa.Column("current_sign_in_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("last_sign_in_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("last_password_change_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("current_sign_in_ip", sa.VARCHAR(length=16), nullable=True),
        sa.Column("last_sign_in_ip", sa.VARCHAR(length=16), nullable=True),
        sa.Column("last_sign_in_user_agent", sa.TEXT(), nullable=True),
        sa.Column("failed_attempts", sa.Integer(), nullable=False),
        sa.Column("unlock_token", sa.VARCHAR(length=128), nullable=True),
        sa.Column("locked_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("encrypted_password", sa.TEXT(), nullable=False),
        sa.Column("password_salt", sa.TEXT(), nullable=False),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone_number", sa.TEXT(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("is_suspended", sa.Boolean(), nullable=False),
        sa.Column("suspended_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("suspended_reason", sa.TEXT(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("confirmation_token"),
        sa.UniqueConstraint("remember_token"),
        sa.UniqueConstraint("unlock_token"),
    )
    op.create_index("idx_account_search_vector", "accounts", ["search_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_accounts_email"), "accounts", ["email"], unique=True)
    op.create_index(op.f("ix_accounts_friendly_id"), "accounts", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_accounts_friendly_slug"), "accounts", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_accounts_id"), "accounts", ["id"], unique=False)
    op.create_index(op.f("ix_accounts_username"), "accounts", ["username"], unique=True)
    op.create_table(
        "attachment_blobs",
        sa.Column("deleted_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("content_type", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("meta_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("service_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("byte_size", sa.Numeric(), nullable=False),
        sa.Column("checksum", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("key", name="uq_attachment_blobs_key"),
    )
    op.create_index(op.f("ix_attachment_blobs_friendly_id"), "attachment_blobs", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_attachment_blobs_friendly_slug"), "attachment_blobs", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_attachment_blobs_id"), "attachment_blobs", ["id"], unique=False)
    op.create_index(op.f("ix_attachment_blobs_key"), "attachment_blobs", ["key"], unique=True)
    op.create_table(
        "category",
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("parent_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("sort_order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["category.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_category_friendly_id"), "category", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_category_friendly_slug"), "category", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_category_id"), "category", ["id"], unique=False)
    op.create_index(op.f("ix_category_title"), "category", ["title"], unique=False)
    op.create_table(
        "currency",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("search_text", sa.TEXT(), nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("code", sa.VARCHAR(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_currency_search_vector", "currency", ["search_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_currency_code"), "currency", ["code"], unique=True)
    op.create_index(op.f("ix_currency_id"), "currency", ["id"], unique=False)
    op.create_table(
        "inventory",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("inventoriable_type", sa.String(length=50), nullable=False),
        sa.Column("inventoriable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("quantity_in_stock", sa.Integer(), nullable=False),
        sa.Column("reserved_stock", sa.Integer(), nullable=False),
        sa.CheckConstraint("quantity_in_stock >= 0", name="chk_quantity_in_stock_positive"),
        sa.CheckConstraint("reserved_stock <= quantity_in_stock", name="chk_reserved_not_exceed_stock"),
        sa.CheckConstraint("reserved_stock >= 0", name="chk_reserved_stock_positive"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("inventoriable_type", "inventoriable_id", name="uq_inventory_item"),
    )
    op.create_index(op.f("ix_inventory_id"), "inventory", ["id"], unique=False)
    op.create_index(op.f("ix_inventory_inventoriable_id"), "inventory", ["inventoriable_id"], unique=False)
    op.create_index(op.f("ix_inventory_inventoriable_type"), "inventory", ["inventoriable_type"], unique=False)
    op.create_table(
        "permissions",
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("resource", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("action", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("resource", "action", name="uq_permission_resource_action"),
    )
    op.create_index(op.f("ix_permissions_action"), "permissions", ["action"], unique=False)
    op.create_index(op.f("ix_permissions_id"), "permissions", ["id"], unique=False)
    op.create_index(op.f("ix_permissions_resource"), "permissions", ["resource"], unique=False)
    op.create_table(
        "tokens",
        sa.Column("deleted_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("revoked", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tokens_id"), "tokens", ["id"], unique=False)
    op.create_index(op.f("ix_tokens_revoked"), "tokens", ["revoked"], unique=False)
    op.create_index(op.f("ix_tokens_token"), "tokens", ["token"], unique=True)
    op.create_table(
        "account_type_groups",
        sa.Column("account_type_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("assigned_by", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["account_type_id"],
            ["account_types.id"],
        ),
        sa.PrimaryKeyConstraint("account_type_id", "account_id"),
    )
    op.create_index(op.f("ix_account_type_groups_account_id"), "account_type_groups", ["account_id"], unique=False)
    op.create_index(
        op.f("ix_account_type_groups_account_type_id"), "account_type_groups", ["account_type_id"], unique=False
    )
    op.create_table(
        "attachment_variants",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("blob_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("variation_digest", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.ForeignKeyConstraint(
            ["blob_id"],
            ["attachment_blobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("blob_id", "variation_digest", name="uq_attachment_variants_blob_variation"),
    )
    op.create_index(op.f("ix_attachment_variants_id"), "attachment_variants", ["id"], unique=False)
    op.create_table(
        "attachments",
        sa.Column("deleted_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("attachable_type", sa.String(length=120), nullable=False),
        sa.Column("attachable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("blob_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["blob_id"],
            ["attachment_blobs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "attachable_type", "attachable_id", "name", "blob_id", name="uq_attachments_attachable_name_blob"
        ),
    )
    op.create_index(op.f("ix_attachments_attachable_type"), "attachments", ["attachable_type"], unique=False)
    op.create_index(op.f("ix_attachments_blob_id"), "attachments", ["blob_id"], unique=False)
    op.create_index(op.f("ix_attachments_friendly_id"), "attachments", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_attachments_friendly_slug"), "attachments", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_attachments_id"), "attachments", ["id"], unique=False)
    op.create_table(
        "audit_logs",
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("action", sa.VARCHAR(length=255), nullable=False),
        sa.Column("resource_type", sa.VARCHAR(length=255), nullable=False),
        sa.Column("resource_id", sa.VARCHAR(length=255), nullable=False),
        sa.Column("details", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("ip_address", sa.VARCHAR(length=45), nullable=True),
        sa.Column("user_agent", sa.VARCHAR(length=255), nullable=True),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_audit_logs_id"), "audit_logs", ["id"], unique=False)
    op.create_table(
        "country",
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("search_text", sa.TEXT(), nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=True),
        sa.Column("language", sa.TEXT(), nullable=True),
        sa.Column("currency_id", sa.Uuid(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["currency.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_country_search_vector", "country", ["search_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_country_id"), "country", ["id"], unique=False)
    op.create_table(
        "events_outbox",
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("event_type", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("entity_type", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("entity_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("payload", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("status", sa.TEXT(), nullable=False),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("session_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("attempts", sa.Integer(), nullable=False),
        sa.Column("last_attempt_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("error_message", sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_events_outbox_event_type", "events_outbox", ["event_type"], unique=False)
    op.create_index("idx_events_outbox_status_created", "events_outbox", ["status", "created_datetime"], unique=False)
    op.create_index(op.f("ix_events_outbox_event_type"), "events_outbox", ["event_type"], unique=False)
    op.create_index(op.f("ix_events_outbox_id"), "events_outbox", ["id"], unique=False)
    op.create_table(
        "inventory_actions",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("inventory_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("action_type", sa.TEXT(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("reason", sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["inventory_id"],
            ["inventory.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_inventory_actions_id"), "inventory_actions", ["id"], unique=False)
    op.create_index(op.f("ix_inventory_actions_inventory_id"), "inventory_actions", ["inventory_id"], unique=False)
    op.create_table(
        "notification_templates",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("body", sa.TEXT(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_notification_templates_id"), "notification_templates", ["id"], unique=False)
    op.create_table(
        "products",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("search_text", sa.TEXT(), nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("deleted_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("price", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("supplier_account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("currency_id", sa.Uuid(), nullable=False),
        sa.Column("category_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("status", sa.TEXT(), nullable=False),
        sa.Column("is_digital", sa.Boolean(), nullable=False),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["currency.id"],
        ),
        sa.ForeignKeyConstraint(
            ["supplier_account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_product_attributes", "products", ["attributes"], unique=False, postgresql_using="gin")
    op.create_index("idx_product_search_vector", "products", ["search_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_products_category_id"), "products", ["category_id"], unique=False)
    op.create_index(op.f("ix_products_friendly_id"), "products", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_products_friendly_slug"), "products", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_products_id"), "products", ["id"], unique=False)
    op.create_index(op.f("ix_products_name"), "products", ["name"], unique=False)
    op.create_index(op.f("ix_products_status"), "products", ["status"], unique=False)
    op.create_index(op.f("ix_products_supplier_account_id"), "products", ["supplier_account_id"], unique=False)
    op.create_table(
        "account_type_infos",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("attachment_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["account_type_id"],
            ["account_types.id"],
        ),
        sa.ForeignKeyConstraint(
            ["attachment_id"],
            ["attachments.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "account_type_id", name="uq_account_type_info_account_type"),
    )
    op.create_index(
        "idx_account_type_infos_account_type", "account_type_infos", ["account_id", "account_type_id"], unique=False
    )
    op.create_index(
        "idx_account_type_infos_attributes", "account_type_infos", ["attributes"], unique=False, postgresql_using="gin"
    )
    op.create_index(op.f("ix_account_type_infos_account_id"), "account_type_infos", ["account_id"], unique=False)
    op.create_index(
        op.f("ix_account_type_infos_account_type_id"), "account_type_infos", ["account_type_id"], unique=False
    )
    op.create_index(op.f("ix_account_type_infos_attachment_id"), "account_type_infos", ["attachment_id"], unique=False)
    op.create_index(op.f("ix_account_type_infos_id"), "account_type_infos", ["id"], unique=False)
    op.create_table(
        "addresses",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("addressable_type", sqlmodel.sql.sqltypes.AutoString(length=120), nullable=False),
        sa.Column("addressable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("country_id", sa.Uuid(), nullable=False),
        sa.Column("phone_number", sa.TEXT(), nullable=True),
        sa.Column("address", sa.TEXT(), nullable=False),
        sa.Column("city", sa.TEXT(), nullable=False),
        sa.Column("state", sa.TEXT(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.Column("postal_code", sa.TEXT(), nullable=True),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_addresses_addressable_id"), "addresses", ["addressable_id"], unique=False)
    op.create_index(op.f("ix_addresses_addressable_type"), "addresses", ["addressable_type"], unique=False)
    op.create_index(op.f("ix_addresses_attributes"), "addresses", ["attributes"], unique=False)
    op.create_index(op.f("ix_addresses_friendly_id"), "addresses", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_addresses_friendly_slug"), "addresses", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_addresses_id"), "addresses", ["id"], unique=False)
    op.create_index(op.f("ix_addresses_phone_number"), "addresses", ["phone_number"], unique=False)
    op.create_table(
        "kyc_document_types",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "account_type", sa.Enum("ADMIN", "BUSINESS", "SUPPLIER", "USER", name="accounttypeenum"), nullable=False
        ),
        sa.Column("verification_type", sa.TEXT(), nullable=False),
        sa.Column("country_id", sa.Uuid(), nullable=False),
        sa.Column("requires_value_submission", sa.Boolean(), nullable=False),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "name", "country_id", "account_type", name="uq_kyc_document_type__name__country__account_type"
        ),
    )
    op.create_index(op.f("ix_kyc_document_types_id"), "kyc_document_types", ["id"], unique=False)
    op.create_table(
        "product_item_requests",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("seller_account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("supplier_account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("mode", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("product_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("requested_quantity", sa.Integer(), nullable=False),
        sa.Column("status", sa.VARCHAR(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.ForeignKeyConstraint(
            ["seller_account_id"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["supplier_account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "seller_account_id",
            "supplier_account_id",
            "product_id",
            name="uq_resale_request__seller__supplier__product",
        ),
    )
    op.create_index(op.f("ix_product_item_requests_id"), "product_item_requests", ["id"], unique=False)
    op.create_index(op.f("ix_product_item_requests_mode"), "product_item_requests", ["mode"], unique=False)
    op.create_index(op.f("ix_product_item_requests_product_id"), "product_item_requests", ["product_id"], unique=False)
    op.create_index(
        op.f("ix_product_item_requests_seller_account_id"), "product_item_requests", ["seller_account_id"], unique=False
    )
    op.create_index(
        op.f("ix_product_item_requests_supplier_account_id"),
        "product_item_requests",
        ["supplier_account_id"],
        unique=False,
    )
    op.create_table(
        "product_items",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("search_text", sa.TEXT(), nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("deleted_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("product_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("seller_account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("markup_percentage", sa.NUMERIC(precision=6, scale=2), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=True),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("price", sa.NUMERIC(precision=12, scale=2), nullable=True),
        sa.Column("currency_id", sa.Uuid(), nullable=True),
        sa.Column("category_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("status", sa.TEXT(), nullable=True),
        sa.Column("is_digital", sa.Boolean(), nullable=True),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.CheckConstraint("markup_percentage >= 0", name="chk_product_item_markup_percentage_non_negative"),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["currency.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.ForeignKeyConstraint(
            ["seller_account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("product_id", "seller_account_id", name="uq_product_item_seller"),
    )
    op.create_index(
        "idx_product_item_attributes", "product_items", ["attributes"], unique=False, postgresql_using="gin"
    )
    op.create_index(
        "idx_product_item_search_vector", "product_items", ["search_vector"], unique=False, postgresql_using="gin"
    )
    op.create_index(op.f("ix_product_items_category_id"), "product_items", ["category_id"], unique=False)
    op.create_index(op.f("ix_product_items_friendly_id"), "product_items", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_product_items_friendly_slug"), "product_items", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_product_items_id"), "product_items", ["id"], unique=False)
    op.create_index(op.f("ix_product_items_name"), "product_items", ["name"], unique=False)
    op.create_index(op.f("ix_product_items_product_id"), "product_items", ["product_id"], unique=False)
    op.create_index(op.f("ix_product_items_seller_account_id"), "product_items", ["seller_account_id"], unique=False)
    op.create_index(op.f("ix_product_items_status"), "product_items", ["status"], unique=False)
    op.create_table(
        "account_type_permissions",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.Column("granted", sa.Boolean(), nullable=False),
        sa.Column("resource_id", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column("assigned_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("assigned_by", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.ForeignKeyConstraint(
            ["assigned_by"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_type_info_id", "permission_id", "resource_id", name="uq_account_type_permission"),
    )
    op.create_index(
        op.f("ix_account_type_permissions_account_type_info_id"),
        "account_type_permissions",
        ["account_type_info_id"],
        unique=False,
    )
    op.create_index(op.f("ix_account_type_permissions_id"), "account_type_permissions", ["id"], unique=False)
    op.create_index(
        op.f("ix_account_type_permissions_permission_id"), "account_type_permissions", ["permission_id"], unique=False
    )
    op.create_table(
        "banking_infos",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("bank_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("account_holder_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column("encrypted_account_number", sa.TEXT(), nullable=False),
        sa.Column("encrypted_routing_number", sa.TEXT(), nullable=True),
        sa.Column(
            "bank_account_type",
            sa.Enum(
                "CHECKING",
                "SAVINGS",
                "BUSINESS_CHECKING",
                "BUSINESS_SAVINGS",
                "MONEY_MARKET",
                "CERTIFICATE_OF_DEPOSIT",
                "JOINT",
                "TRUST",
                "OTHER",
                name="bankaccounttype",
            ),
            nullable=False,
        ),
        sa.Column("bank_address", sa.TEXT(), nullable=True),
        sa.Column("swift_code", sqlmodel.sql.sqltypes.AutoString(length=11), nullable=True),
        sa.Column("status", sa.TEXT(), nullable=False),
        sa.Column("is_primary", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("verified_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("nickname", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_banking_infos_account_type_info_id"), "banking_infos", ["account_type_info_id"], unique=False
    )
    op.create_index(op.f("ix_banking_infos_id"), "banking_infos", ["id"], unique=False)
    op.create_table(
        "carts",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("session_id", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.CheckConstraint(
            "account_type_info_id IS NOT NULL OR session_id IS NOT NULL",
            name="chk_account_type_info_id_or_session_id_not_null",
        ),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_carts_account_type_info_id"), "carts", ["account_type_info_id"], unique=False)
    op.create_index(op.f("ix_carts_friendly_id"), "carts", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_carts_friendly_slug"), "carts", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_carts_id"), "carts", ["id"], unique=False)
    op.create_index(op.f("ix_carts_session_id"), "carts", ["session_id"], unique=False)
    op.create_table(
        "kyc_attempts",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_reset", sa.Boolean(), nullable=False),
        sa.Column("reset_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("reset_reason", sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_kyc_attempts_id"), "kyc_attempts", ["id"], unique=False)
    op.create_table(
        "kyc_documents",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("document_type_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("attachment_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("value", sa.TEXT(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("PENDING", "IN_REVIEW", "APPROVED", "REJECTED", "EXPIRED", name="kycdocumentverificationstatus"),
            nullable=False,
        ),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.ForeignKeyConstraint(
            ["attachment_id"],
            ["attachments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["document_type_id"],
            ["kyc_document_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "account_type_info_id", "document_type_id", name="uq_kyc_document__account_id__document_type_id"
        ),
    )
    op.create_index(op.f("ix_kyc_documents_id"), "kyc_documents", ["id"], unique=False)
    op.create_table(
        "notification_preferences",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("enabled_methods", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_notification_preferences_account_type_info_id"),
        "notification_preferences",
        ["account_type_info_id"],
        unique=False,
    )
    op.create_index(op.f("ix_notification_preferences_id"), "notification_preferences", ["id"], unique=False)
    op.create_table(
        "notifications",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_notifications_account_type_info_id"), "notifications", ["account_type_info_id"], unique=False
    )
    op.create_index(op.f("ix_notifications_id"), "notifications", ["id"], unique=False)
    op.create_table(
        "orders",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("friendly_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("friendly_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("status", sa.VARCHAR(length=150), nullable=False),
        sa.Column("session_id", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column("total_amount", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.CheckConstraint(
            "account_type_info_id IS NOT NULL OR session_id IS NOT NULL",
            name="chk_account_type_info_id_or_session_id_not_null",
        ),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_orders_account_type_info_id"), "orders", ["account_type_info_id"], unique=False)
    op.create_index(op.f("ix_orders_friendly_id"), "orders", ["friendly_id"], unique=True)
    op.create_index(op.f("ix_orders_friendly_slug"), "orders", ["friendly_slug"], unique=True)
    op.create_index(op.f("ix_orders_id"), "orders", ["id"], unique=False)
    op.create_index(op.f("ix_orders_session_id"), "orders", ["session_id"], unique=False)
    op.create_table(
        "reviews",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("reviewable_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("reviewable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("comment", sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_reviews_account_type_info_id"), "reviews", ["account_type_info_id"], unique=False)
    op.create_index(op.f("ix_reviews_id"), "reviews", ["id"], unique=False)
    op.create_index(op.f("ix_reviews_reviewable_id"), "reviews", ["reviewable_id"], unique=False)
    op.create_index(op.f("ix_reviews_reviewable_type"), "reviews", ["reviewable_type"], unique=False)
    op.create_table(
        "wishlists",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_type_info_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=True),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_type_info_id"],
            ["account_type_infos.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_wishlists_account_type_info_id"), "wishlists", ["account_type_info_id"], unique=False)
    op.create_index(op.f("ix_wishlists_id"), "wishlists", ["id"], unique=False)
    op.create_table(
        "cart_items",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("cart_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("cartable_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("cartable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cart_id"],
            ["carts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_cart_items_cart_id"), "cart_items", ["cart_id"], unique=False)
    op.create_index(op.f("ix_cart_items_cartable_id"), "cart_items", ["cartable_id"], unique=False)
    op.create_index(op.f("ix_cart_items_cartable_type"), "cart_items", ["cartable_type"], unique=False)
    op.create_index(op.f("ix_cart_items_id"), "cart_items", ["id"], unique=False)
    op.create_table(
        "kyc_document_verification_comments",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("kyc_document_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("reviewer_account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content", sa.TEXT(), nullable=False),
        sa.Column("is_internal", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["kyc_document_id"],
            ["kyc_documents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewer_account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_kyc_document_verification_comments_id"), "kyc_document_verification_comments", ["id"], unique=False
    )
    op.create_table(
        "order_invoices",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("order_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("invoiceable_type", sqlmodel.sql.sqltypes.AutoString(length=120), nullable=True),
        sa.Column("invoiceable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("amount", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_invoices_id"), "order_invoices", ["id"], unique=False)
    op.create_index(op.f("ix_order_invoices_invoiceable_id"), "order_invoices", ["invoiceable_id"], unique=False)
    op.create_index(op.f("ix_order_invoices_invoiceable_type"), "order_invoices", ["invoiceable_type"], unique=False)
    op.create_index(op.f("ix_order_invoices_order_id"), "order_invoices", ["order_id"], unique=False)
    op.create_table(
        "order_items",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("order_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("orderable_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("orderable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("price", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_items_id"), "order_items", ["id"], unique=False)
    op.create_index(op.f("ix_order_items_order_id"), "order_items", ["order_id"], unique=False)
    op.create_index(op.f("ix_order_items_orderable_id"), "order_items", ["orderable_id"], unique=False)
    op.create_index(op.f("ix_order_items_orderable_type"), "order_items", ["orderable_type"], unique=False)
    op.create_table(
        "wishlist_items",
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("wishlist_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("wishable_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("wishable_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.CheckConstraint("priority >= 1 AND priority <= 5", name="chk_wishlist_item_priority_range"),
        sa.ForeignKeyConstraint(
            ["wishlist_id"],
            ["wishlists.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("wishlist_id", "wishable_id", "wishable_type", name="uq_wishlist_item_wishlist_type"),
    )
    op.create_index(op.f("ix_wishlist_items_id"), "wishlist_items", ["id"], unique=False)
    op.create_index(op.f("ix_wishlist_items_wishable_id"), "wishlist_items", ["wishable_id"], unique=False)
    op.create_index(op.f("ix_wishlist_items_wishable_type"), "wishlist_items", ["wishable_type"], unique=False)
    op.create_index(op.f("ix_wishlist_items_wishlist_id"), "wishlist_items", ["wishlist_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_wishlist_items_wishlist_id"), table_name="wishlist_items")
    op.drop_index(op.f("ix_wishlist_items_wishable_type"), table_name="wishlist_items")
    op.drop_index(op.f("ix_wishlist_items_wishable_id"), table_name="wishlist_items")
    op.drop_index(op.f("ix_wishlist_items_id"), table_name="wishlist_items")
    op.drop_table("wishlist_items")
    op.drop_index(op.f("ix_order_items_orderable_type"), table_name="order_items")
    op.drop_index(op.f("ix_order_items_orderable_id"), table_name="order_items")
    op.drop_index(op.f("ix_order_items_order_id"), table_name="order_items")
    op.drop_index(op.f("ix_order_items_id"), table_name="order_items")
    op.drop_table("order_items")
    op.drop_index(op.f("ix_order_invoices_order_id"), table_name="order_invoices")
    op.drop_index(op.f("ix_order_invoices_invoiceable_type"), table_name="order_invoices")
    op.drop_index(op.f("ix_order_invoices_invoiceable_id"), table_name="order_invoices")
    op.drop_index(op.f("ix_order_invoices_id"), table_name="order_invoices")
    op.drop_table("order_invoices")
    op.drop_index(op.f("ix_kyc_document_verification_comments_id"), table_name="kyc_document_verification_comments")
    op.drop_table("kyc_document_verification_comments")
    op.drop_index(op.f("ix_cart_items_id"), table_name="cart_items")
    op.drop_index(op.f("ix_cart_items_cartable_type"), table_name="cart_items")
    op.drop_index(op.f("ix_cart_items_cartable_id"), table_name="cart_items")
    op.drop_index(op.f("ix_cart_items_cart_id"), table_name="cart_items")
    op.drop_table("cart_items")
    op.drop_index(op.f("ix_wishlists_id"), table_name="wishlists")
    op.drop_index(op.f("ix_wishlists_account_type_info_id"), table_name="wishlists")
    op.drop_table("wishlists")
    op.drop_index(op.f("ix_reviews_reviewable_type"), table_name="reviews")
    op.drop_index(op.f("ix_reviews_reviewable_id"), table_name="reviews")
    op.drop_index(op.f("ix_reviews_id"), table_name="reviews")
    op.drop_index(op.f("ix_reviews_account_type_info_id"), table_name="reviews")
    op.drop_table("reviews")
    op.drop_index(op.f("ix_orders_session_id"), table_name="orders")
    op.drop_index(op.f("ix_orders_id"), table_name="orders")
    op.drop_index(op.f("ix_orders_friendly_slug"), table_name="orders")
    op.drop_index(op.f("ix_orders_friendly_id"), table_name="orders")
    op.drop_index(op.f("ix_orders_account_type_info_id"), table_name="orders")
    op.drop_table("orders")
    op.drop_index(op.f("ix_notifications_id"), table_name="notifications")
    op.drop_index(op.f("ix_notifications_account_type_info_id"), table_name="notifications")
    op.drop_table("notifications")
    op.drop_index(op.f("ix_notification_preferences_id"), table_name="notification_preferences")
    op.drop_index(op.f("ix_notification_preferences_account_type_info_id"), table_name="notification_preferences")
    op.drop_table("notification_preferences")
    op.drop_index(op.f("ix_kyc_documents_id"), table_name="kyc_documents")
    op.drop_table("kyc_documents")
    op.drop_index(op.f("ix_kyc_attempts_id"), table_name="kyc_attempts")
    op.drop_table("kyc_attempts")
    op.drop_index(op.f("ix_carts_session_id"), table_name="carts")
    op.drop_index(op.f("ix_carts_id"), table_name="carts")
    op.drop_index(op.f("ix_carts_friendly_slug"), table_name="carts")
    op.drop_index(op.f("ix_carts_friendly_id"), table_name="carts")
    op.drop_index(op.f("ix_carts_account_type_info_id"), table_name="carts")
    op.drop_table("carts")
    op.drop_index(op.f("ix_banking_infos_id"), table_name="banking_infos")
    op.drop_index(op.f("ix_banking_infos_account_type_info_id"), table_name="banking_infos")
    op.drop_table("banking_infos")
    op.drop_index(op.f("ix_account_type_permissions_permission_id"), table_name="account_type_permissions")
    op.drop_index(op.f("ix_account_type_permissions_id"), table_name="account_type_permissions")
    op.drop_index(op.f("ix_account_type_permissions_account_type_info_id"), table_name="account_type_permissions")
    op.drop_table("account_type_permissions")
    op.drop_index(op.f("ix_product_items_status"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_seller_account_id"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_product_id"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_name"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_id"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_friendly_slug"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_friendly_id"), table_name="product_items")
    op.drop_index(op.f("ix_product_items_category_id"), table_name="product_items")
    op.drop_index("idx_product_item_search_vector", table_name="product_items", postgresql_using="gin")
    op.drop_index("idx_product_item_attributes", table_name="product_items", postgresql_using="gin")
    op.drop_table("product_items")
    op.drop_index(op.f("ix_product_item_requests_supplier_account_id"), table_name="product_item_requests")
    op.drop_index(op.f("ix_product_item_requests_seller_account_id"), table_name="product_item_requests")
    op.drop_index(op.f("ix_product_item_requests_product_id"), table_name="product_item_requests")
    op.drop_index(op.f("ix_product_item_requests_mode"), table_name="product_item_requests")
    op.drop_index(op.f("ix_product_item_requests_id"), table_name="product_item_requests")
    op.drop_table("product_item_requests")
    op.drop_index(op.f("ix_kyc_document_types_id"), table_name="kyc_document_types")
    op.drop_table("kyc_document_types")
    op.drop_index(op.f("ix_addresses_phone_number"), table_name="addresses")
    op.drop_index(op.f("ix_addresses_id"), table_name="addresses")
    op.drop_index(op.f("ix_addresses_friendly_slug"), table_name="addresses")
    op.drop_index(op.f("ix_addresses_friendly_id"), table_name="addresses")
    op.drop_index(op.f("ix_addresses_attributes"), table_name="addresses")
    op.drop_index(op.f("ix_addresses_addressable_type"), table_name="addresses")
    op.drop_index(op.f("ix_addresses_addressable_id"), table_name="addresses")
    op.drop_table("addresses")
    op.drop_index(op.f("ix_account_type_infos_id"), table_name="account_type_infos")
    op.drop_index(op.f("ix_account_type_infos_attachment_id"), table_name="account_type_infos")
    op.drop_index(op.f("ix_account_type_infos_account_type_id"), table_name="account_type_infos")
    op.drop_index(op.f("ix_account_type_infos_account_id"), table_name="account_type_infos")
    op.drop_index("idx_account_type_infos_attributes", table_name="account_type_infos", postgresql_using="gin")
    op.drop_index("idx_account_type_infos_account_type", table_name="account_type_infos")
    op.drop_table("account_type_infos")
    op.drop_index(op.f("ix_products_supplier_account_id"), table_name="products")
    op.drop_index(op.f("ix_products_status"), table_name="products")
    op.drop_index(op.f("ix_products_name"), table_name="products")
    op.drop_index(op.f("ix_products_id"), table_name="products")
    op.drop_index(op.f("ix_products_friendly_slug"), table_name="products")
    op.drop_index(op.f("ix_products_friendly_id"), table_name="products")
    op.drop_index(op.f("ix_products_category_id"), table_name="products")
    op.drop_index("idx_product_search_vector", table_name="products", postgresql_using="gin")
    op.drop_index("idx_product_attributes", table_name="products", postgresql_using="gin")
    op.drop_table("products")
    op.drop_index(op.f("ix_notification_templates_id"), table_name="notification_templates")
    op.drop_table("notification_templates")
    op.drop_index(op.f("ix_inventory_actions_inventory_id"), table_name="inventory_actions")
    op.drop_index(op.f("ix_inventory_actions_id"), table_name="inventory_actions")
    op.drop_table("inventory_actions")
    op.drop_index(op.f("ix_events_outbox_id"), table_name="events_outbox")
    op.drop_index(op.f("ix_events_outbox_event_type"), table_name="events_outbox")
    op.drop_index("idx_events_outbox_status_created", table_name="events_outbox")
    op.drop_index("idx_events_outbox_event_type", table_name="events_outbox")
    op.drop_table("events_outbox")
    op.drop_index(op.f("ix_country_id"), table_name="country")
    op.drop_index("idx_country_search_vector", table_name="country", postgresql_using="gin")
    op.drop_table("country")
    op.drop_index(op.f("ix_audit_logs_id"), table_name="audit_logs")
    op.drop_table("audit_logs")
    op.drop_index(op.f("ix_attachments_id"), table_name="attachments")
    op.drop_index(op.f("ix_attachments_friendly_slug"), table_name="attachments")
    op.drop_index(op.f("ix_attachments_friendly_id"), table_name="attachments")
    op.drop_index(op.f("ix_attachments_blob_id"), table_name="attachments")
    op.drop_index(op.f("ix_attachments_attachable_type"), table_name="attachments")
    op.drop_table("attachments")
    op.drop_index(op.f("ix_attachment_variants_id"), table_name="attachment_variants")
    op.drop_table("attachment_variants")
    op.drop_index(op.f("ix_account_type_groups_account_type_id"), table_name="account_type_groups")
    op.drop_index(op.f("ix_account_type_groups_account_id"), table_name="account_type_groups")
    op.drop_table("account_type_groups")
    op.drop_index(op.f("ix_tokens_token"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_revoked"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_id"), table_name="tokens")
    op.drop_table("tokens")
    op.drop_index(op.f("ix_permissions_resource"), table_name="permissions")
    op.drop_index(op.f("ix_permissions_id"), table_name="permissions")
    op.drop_index(op.f("ix_permissions_action"), table_name="permissions")
    op.drop_table("permissions")
    op.drop_index(op.f("ix_inventory_inventoriable_type"), table_name="inventory")
    op.drop_index(op.f("ix_inventory_inventoriable_id"), table_name="inventory")
    op.drop_index(op.f("ix_inventory_id"), table_name="inventory")
    op.drop_table("inventory")
    op.drop_index(op.f("ix_currency_id"), table_name="currency")
    op.drop_index(op.f("ix_currency_code"), table_name="currency")
    op.drop_index("idx_currency_search_vector", table_name="currency", postgresql_using="gin")
    op.drop_table("currency")
    op.drop_index(op.f("ix_category_title"), table_name="category")
    op.drop_index(op.f("ix_category_id"), table_name="category")
    op.drop_index(op.f("ix_category_friendly_slug"), table_name="category")
    op.drop_index(op.f("ix_category_friendly_id"), table_name="category")
    op.drop_table("category")
    op.drop_index(op.f("ix_attachment_blobs_key"), table_name="attachment_blobs")
    op.drop_index(op.f("ix_attachment_blobs_id"), table_name="attachment_blobs")
    op.drop_index(op.f("ix_attachment_blobs_friendly_slug"), table_name="attachment_blobs")
    op.drop_index(op.f("ix_attachment_blobs_friendly_id"), table_name="attachment_blobs")
    op.drop_table("attachment_blobs")
    op.drop_index(op.f("ix_accounts_username"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_id"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_friendly_slug"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_friendly_id"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_email"), table_name="accounts")
    op.drop_index("idx_account_search_vector", table_name="accounts", postgresql_using="gin")
    op.drop_table("accounts")
    op.drop_index(op.f("ix_account_types_key"), table_name="account_types")
    op.drop_index(op.f("ix_account_types_id"), table_name="account_types")
    op.drop_table("account_types")
    # ### end Alembic commands ###
